{"ast":null,"code":"var _jsxFileName = \"/Users/ishita/Desktop/ishita-mario/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport StartScreen from './components/StartScreen';\nimport GameScreen from './components/GameScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentScreen, setCurrentScreen] = useState('start');\n  const [clouds, setClouds] = useState([]);\n  const cloudIntervalRef = useRef(null);\n\n  // Generate a random cloud\n  const generateCloud = () => {\n    const cloudTypes = ['/assets/sprites/cloud.png', '/assets/sprites/different-cloud.png'];\n    const cloudType = cloudTypes[Math.floor(Math.random() * cloudTypes.length)];\n    const newCloud = {\n      id: Date.now() + Math.random(),\n      src: cloudType,\n      top: Math.random() * 150 + 20,\n      size: Math.random() * 60 + 40,\n      duration: Math.random() * 20 + 20,\n      // Random duration between 20-40s (slower)\n      delay: Math.random() * 5\n    };\n    setClouds(prev => [...prev, newCloud]);\n    setTimeout(() => {\n      setClouds(prev => prev.filter(cloud => cloud.id !== newCloud.id));\n    }, (newCloud.duration + newCloud.delay) * 1000);\n  };\n\n  // Start cloud generation\n  const startCloudGeneration = () => {\n    // Clear any existing interval\n    if (cloudIntervalRef.current) {\n      clearInterval(cloudIntervalRef.current);\n    }\n\n    // Generate first few clouds immediately\n    generateCloud();\n    setTimeout(() => generateCloud(), 1000);\n    setTimeout(() => generateCloud(), 2000);\n\n    // Set up interval for continuous generation\n    cloudIntervalRef.current = setInterval(() => {\n      generateCloud();\n    }, Math.random() * 4000 + 1500); // 1.5-5.5 seconds (more frequent)\n  };\n\n  // Stop cloud generation\n  const stopCloudGeneration = () => {\n    if (cloudIntervalRef.current) {\n      clearInterval(cloudIntervalRef.current);\n      cloudIntervalRef.current = null;\n    }\n    setClouds([]); // Clear existing clouds\n  };\n\n  // Handle screen changes\n  useEffect(() => {\n    if (currentScreen === 'game') {\n      startCloudGeneration();\n    } else {\n      stopCloudGeneration();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (cloudIntervalRef.current) {\n        clearInterval(cloudIntervalRef.current);\n      }\n    };\n  }, [currentScreen]);\n  const goToGame = () => {\n    setCurrentScreen('game');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(StartScreen, {\n      onStartGame: goToGame,\n      showUI: false,\n      clouds: []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), currentScreen === 'start' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(StartScreen, {\n        onStartGame: goToGame,\n        showUI: true,\n        clouds: []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), currentScreen === 'game' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: 3,\n        pointerEvents: 'none'\n      },\n      children: clouds.map(cloud => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: cloud.src,\n        alt: \"Cloud\",\n        style: {\n          position: 'absolute',\n          left: '-100px',\n          top: `${cloud.top}px`,\n          width: `${cloud.size}px`,\n          height: 'auto',\n          zIndex: 3,\n          animation: `floatCloud ${cloud.duration}s linear infinite`,\n          animationDelay: `${cloud.delay}s`\n        }\n      }, cloud.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"wZ5e0IBgDBvsCMcK3tXE4V2bXgY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","StartScreen","GameScreen","jsxDEV","_jsxDEV","App","_s","currentScreen","setCurrentScreen","clouds","setClouds","cloudIntervalRef","generateCloud","cloudTypes","cloudType","Math","floor","random","length","newCloud","id","Date","now","src","top","size","duration","delay","prev","setTimeout","filter","cloud","startCloudGeneration","current","clearInterval","setInterval","stopCloudGeneration","goToGame","style","position","width","height","children","onStartGame","showUI","fileName","_jsxFileName","lineNumber","columnNumber","left","zIndex","display","alignItems","justifyContent","pointerEvents","map","alt","animation","animationDelay","_c","$RefreshReg$"],"sources":["/Users/ishita/Desktop/ishita-mario/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport StartScreen from './components/StartScreen';\nimport GameScreen from './components/GameScreen';\n\nconst App = () => {\n  const [currentScreen, setCurrentScreen] = useState('start');\n  const [clouds, setClouds] = useState([]);\n  const cloudIntervalRef = useRef(null);\n\n  // Generate a random cloud\n  const generateCloud = () => {\n    const cloudTypes = ['/assets/sprites/cloud.png', '/assets/sprites/different-cloud.png'];\n    const cloudType = cloudTypes[Math.floor(Math.random() * cloudTypes.length)];\n    \n    const newCloud = {\n      id: Date.now() + Math.random(),\n      src: cloudType,\n      top: Math.random() * 150 + 20,\n      size: Math.random() * 60 + 40,\n      duration: Math.random() * 20 + 20, // Random duration between 20-40s (slower)\n      delay: Math.random() * 5\n    };\n    \n    setClouds(prev => [...prev, newCloud]);\n    \n    setTimeout(() => {\n      setClouds(prev => prev.filter(cloud => cloud.id !== newCloud.id));\n    }, (newCloud.duration + newCloud.delay) * 1000);\n  };\n\n  // Start cloud generation\n  const startCloudGeneration = () => {\n    // Clear any existing interval\n    if (cloudIntervalRef.current) {\n      clearInterval(cloudIntervalRef.current);\n    }\n    \n    // Generate first few clouds immediately\n    generateCloud();\n    setTimeout(() => generateCloud(), 1000);\n    setTimeout(() => generateCloud(), 2000);\n    \n    // Set up interval for continuous generation\n    cloudIntervalRef.current = setInterval(() => {\n      generateCloud();\n    }, Math.random() * 4000 + 1500); // 1.5-5.5 seconds (more frequent)\n  };\n\n  // Stop cloud generation\n  const stopCloudGeneration = () => {\n    if (cloudIntervalRef.current) {\n      clearInterval(cloudIntervalRef.current);\n      cloudIntervalRef.current = null;\n    }\n    setClouds([]); // Clear existing clouds\n  };\n\n  // Handle screen changes\n  useEffect(() => {\n    if (currentScreen === 'game') {\n      startCloudGeneration();\n    } else {\n      stopCloudGeneration();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (cloudIntervalRef.current) {\n        clearInterval(cloudIntervalRef.current);\n      }\n    };\n  }, [currentScreen]);\n\n  const goToGame = () => {\n    setCurrentScreen('game');\n  };\n\n  return (\n    <div style={{ position: 'relative', width: '100vw', height: '100vh' }}>\n      {/* Always render the background without clouds */}\n      <StartScreen onStartGame={goToGame} showUI={false} clouds={[]} />\n      \n      {/* Overlay the UI only when on start screen */}\n      {currentScreen === 'start' && (\n        <div style={{ \n          position: 'absolute', \n          top: 0, \n          left: 0, \n          width: '100%', \n          height: '100%', \n          zIndex: 20,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n          <StartScreen onStartGame={goToGame} showUI={true} clouds={[]} />\n        </div>\n      )}\n      \n      {/* Show clouds only during gameplay */}\n      {currentScreen === 'game' && (\n        <div style={{ \n          position: 'absolute', \n          top: 0, \n          left: 0, \n          width: '100%', \n          height: '100%', \n          zIndex: 3,\n          pointerEvents: 'none'\n        }}>\n          {clouds.map(cloud => (\n            <img \n              key={cloud.id}\n              src={cloud.src}\n              alt=\"Cloud\"\n              style={{\n                position: 'absolute',\n                left: '-100px',\n                top: `${cloud.top}px`,\n                width: `${cloud.size}px`,\n                height: 'auto',\n                zIndex: 3,\n                animation: `floatCloud ${cloud.duration}s linear infinite`,\n                animationDelay: `${cloud.delay}s`\n              }}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}